- block:
  # get group name from user
  # - shell: cat /etc/passwd
  # register: passwd_results
  # - name: Get root user info
  #   ansible.builtin.getent:
  #     database: passwd
  #     key: root
  # - ansible.builtin.debug:
  #     var: ansible_facts.getent_passwd

  - name: user_dirs | file > create default user ssh directory
    file:
      path:  "{{ ('/root' if item.owner == 'root' else ('/home/' + item.owner)) + '/' + (item.path | default('.ssh')) }}"
      owner: "{{ item.owner }}"
      group: "{{ item.group | default(omit) }}"
      mode:  "0700"
      state: directory
    with_items: "{{ ssh_user }}"
    tags: ssh_client_config_dir

  - name: user_dirs | file > create private keys directory
    file:
      #old path:  "{{ (item.dest_absolute | default('~' + item.owner + '/' + ssh_keys_sshdir + '/' + (item.dest | default(ssh_private_key_filename)))) | dirname }}"
      path:  "{{ item.1.private_keys_path | default(('/root' if item.0.owner == 'root' else ('/home/' + item.0.owner)) + '/' + (item.1.path | default('.ssh'))) }}"
      state: directory
      owner: "{{ item.0.owner }}"
      group: "{{ item.0.group | default(omit) }}"
      mode:  "0700"
    when:
      - ssh_private_keys | length
      #old - item.0.dest_managed   | default(true)    # auto managed if defined in ssh_user.path else in ~/.ssh
      - item.0.owner == item.1.owner
    with_nested:
      - "{{ ssh_private_keys }}"
      - "{{ ssh_user }}"
    tags: ssh_private_keys_dir

  ## not tested
  - name: public_keys | file > create public keys directory
    file:
      path:  "{{ ('/root' if item.owner == 'root' else ('/home/' + item.owner)) + '/' + ssh_keys_sshdir }}"
      state: directory
      owner: "{{ item.owner }}"
      group: "{{ item.group | default(omit) }}"
      mode:  "0700"
    when:
      - ssh_keys_public_keys | length
      - item.dest_managed    | default(true)
    tags: ssh_public_keys_dir

  when: ssh_user | length
  tags: ssh_user_dirs
